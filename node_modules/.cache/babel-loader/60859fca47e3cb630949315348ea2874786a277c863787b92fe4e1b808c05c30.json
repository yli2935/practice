{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar seen = [];\n/**\n * Check if a value is an object or a function. Keep in mind that array, function, regexp, etc, are objects in JavaScript.\n *\n * @param value the value to check\n * @return true if the value is an object or a function\n */\nfunction isObj(value) {\n  var type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n}\n/**\n * Check if a value is a regular expression.\n *\n * @param value the value to check\n * @return true if the value is a regular expression\n */\nfunction isRegexp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n/**\n * Get an array of all of the enumerable symbols for an object.\n *\n * @param object the object to get the enumerable symbols for\n */\nfunction getOwnEnumPropSymbols(object) {\n  return Object.getOwnPropertySymbols(object).filter(function (keySymbol) {\n    return Object.prototype.propertyIsEnumerable.call(object, keySymbol);\n  });\n}\n/**\n * pretty print an object\n *\n * @param input the object to pretty print\n * @param options the formatting options, transforms, and filters\n * @param pad the padding string\n */\nfunction prettyPrint(input, options, pad) {\n  if (pad === void 0) {\n    pad = '';\n  }\n  // sensible option defaults\n  var defaultOptions = {\n    indent: '\\t',\n    singleQuotes: true\n  };\n  var combinedOptions = __assign(__assign({}, defaultOptions), options);\n  var tokens;\n  if (combinedOptions.inlineCharacterLimit === undefined) {\n    tokens = {\n      newLine: '\\n',\n      newLineOrSpace: '\\n',\n      pad: pad,\n      indent: pad + combinedOptions.indent\n    };\n  } else {\n    tokens = {\n      newLine: '@@__PRETTY_PRINT_NEW_LINE__@@',\n      newLineOrSpace: '@@__PRETTY_PRINT_NEW_LINE_OR_SPACE__@@',\n      pad: '@@__PRETTY_PRINT_PAD__@@',\n      indent: '@@__PRETTY_PRINT_INDENT__@@'\n    };\n  }\n  var expandWhiteSpace = function (string) {\n    if (combinedOptions.inlineCharacterLimit === undefined) {\n      return string;\n    }\n    var oneLined = string.replace(new RegExp(tokens.newLine, 'g'), '').replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ').replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');\n    if (oneLined.length <= combinedOptions.inlineCharacterLimit) {\n      return oneLined;\n    }\n    return string.replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\\n').replace(new RegExp(tokens.pad, 'g'), pad).replace(new RegExp(tokens.indent, 'g'), pad + combinedOptions.indent);\n  };\n  if (seen.indexOf(input) !== -1) {\n    return '\"[Circular]\"';\n  }\n  if (input === null || input === undefined || typeof input === 'number' || typeof input === 'boolean' || typeof input === 'function' || typeof input === 'symbol' || isRegexp(input)) {\n    return String(input);\n  }\n  if (input instanceof Date) {\n    return \"new Date('\" + input.toISOString() + \"')\";\n  }\n  if (Array.isArray(input)) {\n    if (input.length === 0) {\n      return '[]';\n    }\n    seen.push(input);\n    var ret = '[' + tokens.newLine + input.map(function (el, i) {\n      var eol = input.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n      var value = prettyPrint(el, combinedOptions, pad + combinedOptions.indent);\n      if (combinedOptions.transform) {\n        value = combinedOptions.transform(input, i, value);\n      }\n      return tokens.indent + value + eol;\n    }).join('') + tokens.pad + ']';\n    seen.pop();\n    return expandWhiteSpace(ret);\n  }\n  if (isObj(input)) {\n    var objKeys_1 = __spreadArrays(Object.keys(input), getOwnEnumPropSymbols(input));\n    if (combinedOptions.filter) {\n      objKeys_1 = objKeys_1.filter(function (el) {\n        return combinedOptions.filter && combinedOptions.filter(input, el);\n      });\n    }\n    if (objKeys_1.length === 0) {\n      return '{}';\n    }\n    seen.push(input);\n    var ret = '{' + tokens.newLine + objKeys_1.map(function (el, i) {\n      var eol = objKeys_1.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n      var isSymbol = typeof el === 'symbol';\n      var isClassic = !isSymbol && /^[a-z$_][a-z$_0-9]*$/i.test(el.toString());\n      var key = isSymbol || isClassic ? el : prettyPrint(el, combinedOptions);\n      var value = prettyPrint(input[el], combinedOptions, pad + combinedOptions.indent);\n      if (combinedOptions.transform) {\n        value = combinedOptions.transform(input, el, value);\n      }\n      return tokens.indent + String(key) + ': ' + value + eol;\n    }).join('') + tokens.pad + '}';\n    seen.pop();\n    return expandWhiteSpace(ret);\n  }\n  input = String(input).replace(/[\\r\\n]/g, function (x) {\n    return x === '\\n' ? '\\\\n' : '\\\\r';\n  });\n  if (!combinedOptions.singleQuotes) {\n    input = input.replace(/\"/g, '\\\\\"');\n    return \"\\\"\" + input + \"\\\"\";\n  }\n  input = input.replace(/\\\\?'/g, '\\\\\\'');\n  return \"'\" + input + \"'\";\n}\nexports.prettyPrint = prettyPrint;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}